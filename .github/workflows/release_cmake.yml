name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{matrix.os}}

    steps:
    - name: Cache vcpkg packages
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v3
      env:
        cache-name: vcpkg-packages
      with:
        path: |
          C:/vcpkg/archives
          C:/vcpkg/packages
          C:/vcpkg/installed
        key: ${{ env.cache-name }}-v1

    - name: Install zlib (vcpkg)
      if: matrix.os == 'windows-latest'
      run: vcpkg install zlib:x86-windows-static

    - uses: actions/checkout@v4

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake (linux)
      if: matrix.os == 'ubuntu-latest'
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Configure CMake (windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x86-windows-static -A win32

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Archive production artifacts
      id: artifacts-linux
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: adlib2vgm-linux
        path: ${{github.workspace}}/build/adlib2vgm
        if-no-files-found: error

    - name: Archive production artifacts (windows)
      id: artifacts-windows
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: adlib2vgm-win32
        path: ${{github.workspace}}/build/${{env.BUILD_TYPE}}/adlib2vgm.exe
        if-no-files-found: error

    - name: Upload release assets (linux)
      uses: sekwah41/upload-release-assets@v1.1.0
      if: matrix.os == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/')
      with:
        upload_url: ${{ steps.artifacts-linux.outputs.artifact-url }}
        asset_path: ./adlib2vgm-linux.zip
        asset_name: adlib2vgm-linux.zip
        asset_content_type: application/zip

    - name: Upload release assets (windows)
      uses: sekwah41/upload-release-assets@v1.1.0
      if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
      with:
        upload_url: ${{ steps.artifacts-windows.outputs.artifact-url }}
        asset_path: ./adlib2vgm-win32.zip
        asset_name: adlib2vgm-win32.zip
        asset_content_type: application/zip
